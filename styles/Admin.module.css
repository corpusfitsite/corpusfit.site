// Importações necessárias para o componente
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import styles from '../styles/Admin.module.css'; // Importa os estilos
import { FaBell } from 'react-icons/fa'; // Ícone de sino para notificações

// Definições de tipos (interfaces) para garantir segurança de tipo no TypeScript
interface Aluno {
  id: number;
  name: string;
  login: string;
  status?: boolean; // Adicionar status ao Aluno
  image?: string; // Adicionar campo para imagem
  matricula_date?: string; // Adicionar data de matrícula
  afastamento_date?: string; // Adicionar data de afastamento
  dias_frequentados_mes_afastamento?: number; // Adicionar dias frequentados
}

interface Professor {
  id: number;
  name: string;
  login: string;
  status: boolean;
}

interface Exercicio {
  id: number;
  name: string;
  series: number;
  repetitions: number;
}

interface Treino {
  id: number;
  name: string;
  exercicios: Exercicio[];
  alunoId: number;
  professorId: number;
}

const Administrador: React.FC = () => {
  const router = useRouter(); // Hook do Next.js para roteamento
  const [alunos, setAlunos] = useState<Aluno[]>([]); // Estado para armazenar a lista de alunos
  const [newAluno, setNewAluno] = useState({ name: '', login: '' }); // Estado para o formulário de novo aluno
  const [searchTerm, setSearchTerm] = useState(''); // Estado para o termo de busca de alunos
  const [currentPage, setCurrentPage] = useState(1); // Estado para a paginação
  const [professores, setProfessores] = useState<Professor[]>([]); // Estado para armazenar a lista de professores
  const [isCheckedMap, setIsCheckedMap] = useState<{ [key: string]: boolean }>({}); // Controla o estado de cada botão ON/OFF por professor
  const [selectedAluno, setSelectedAluno] = useState<Aluno | null>(null); // Estado para o aluno selecionado (para ver treinos)
  const [alunoMensagem, setAlunoMensagem] = useState<Aluno | null>(null); // Manter para a mensagem principal, se ainda for usar
  const [matriculaDate, setMatriculaDate] = useState<string | null>(null); // Manter para a mensagem principal, se ainda for usar
  const [afastamentoInfo, setAfastamentoInfo] = useState<{ date: string; days: number } | null>(null); // Manter para a mensagem principal, se ainda for usar
  const [treinos, setTreinos] = useState<Treino[]>([]); // Estado para armazenar os treinos do aluno selecionado
  const [treinoError, setTreinoError] = useState<string | null>(null); // Estado para erros ao carregar treinos
  const [showAddAluno, setShowAddAluno] = useState(false); // Estado para controlar a visibilidade do formulário de adicionar aluno
  const [showAddProfessor, setShowAddProfessor] = useState(false); // Estado para controlar a visibilidade do formulário de adicionar professor
  const [showCreateTreinoModal, setShowCreateTreinoModal] = useState(false); // Estado para controlar a visibilidade do modal de criação de treino
  const [newTreinoName, setNewTreinoName] = useState(''); // Nome do novo treino
  const [newExercicios, setNewExercicios] = useState<Exercicio[]>([{ id: 0, name: '', series: 0, repetitions: 0 }]); // Exercícios do novo treino
  const [selectedProfessorId, setSelectedProfessorId] = useState<number | null>(null); // ID do professor selecionado para o treino
  const [aniversariantes, setAniversariantes] = useState<string[]>([]); // Lista de aniversariantes
  const [showNotifications, setShowNotifications] = useState(false); // Visibilidade do dropdown de notificações

  const itemsPerPage = 5; // Quantidade de itens por página na tabela de alunos

  // Efeito para carregar dados ao montar o componente
  useEffect(() => {
    fetchAlunos();
    fetchProfessores();
    checkAniversariantes();
  }, []);

  // Função para buscar alunos da API
  const fetchAlunos = async () => {
    try {
      const res = await fetch('/api/alunos');
      if (res.ok) {
        const data = await res.json();
        setAlunos(data);
      } else {
        console.error('Falha ao buscar alunos:', res.statusText);
      }
    } catch (error) {
      console.error('Erro de rede ao buscar alunos:', error);
    }
  };

  // Função para buscar professores da API
  const fetchProfessores = async () => {
    try {
      const res = await fetch('/api/professores');
      if (res.ok) {
        const data = await res.json();
        setProfessores(data);
        // Inicializa o mapa de status dos professores
        const initialCheckedMap: { [key: string]: boolean } = {};
        data.forEach((prof: Professor) => {
          initialCheckedMap[prof.id] = prof.status;
        });
        setIsCheckedMap(initialCheckedMap);
      } else {
        console.error('Falha ao buscar professores:', res.statusText);
      }
    } catch (error) {
      console.error('Erro de rede ao buscar professores:', error);
    }
  };

  // Função para verificar aniversariantes (simulada)
  const checkAniversariantes = () => {
    const today = new Date();
    const currentMonth = today.getMonth() + 1; // getMonth() retorna 0-11
    const currentDay = today.getDate();

    // Dados de alunos com datas de nascimento (exemplo)
    const alunosComAniversarios = [
      { name: 'João Silva', dob: '1990-07-10' },
      { name: 'Maria Souza', dob: '1992-07-11' },
      { name: 'Pedro Alves', dob: '1991-08-01' },
      // Adicione mais alunos com suas datas de nascimento aqui
    ];

    const aniversariantesDoDia = alunosComAniversarios.filter(aluno => {
      const dob = new Date(aluno.dob);
      return dob.getMonth() + 1 === currentMonth && dob.getDate() === currentDay;
    }).map(aluno => aluno.name);

    setAniversariantes(aniversariantesDoDia);
  };

  // Função para adicionar um novo aluno
  const addAluno = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newAluno.name || !newAluno.login) {
      alert('Nome e Login são obrigatórios.');
      return;
    }
    try {
      const res = await fetch('/api/alunos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newAluno),
      });
      if (res.ok) {
        fetchAlunos(); // Atualiza a lista de alunos
        setNewAluno({ name: '', login: '' }); // Limpa o formulário
        setShowAddAluno(false); // Esconde o formulário
      } else {
        console.error('Falha ao adicionar aluno:', res.statusText);
      }
    } catch (error) {
      console.error('Erro de rede ao adicionar aluno:', error);
    }
  };

  // Função para excluir um aluno
  const deleteAluno = async (id: number) => {
    if (!confirm('Tem certeza que deseja excluir este aluno?')) return;
    try {
      const res = await fetch(`/api/alunos?id=${id}`, { method: 'DELETE' });
      if (res.ok) {
        fetchAlunos(); // Atualiza a lista de alunos
      } else {
        console.error('Falha ao excluir aluno:', res.statusText);
      }
    } catch (error) {
      console.error('Erro de rede ao excluir aluno:', error);
    }
  };

  // Função para adicionar um novo professor
  const addProfessor = async (e: React.FormEvent) => {
    e.preventDefault();
    // Lógica para adicionar professor
    // ... (você precisará ter um estado para o novo professor, similar ao newAluno)
    alert('Funcionalidade de adicionar professor não implementada na API de exemplo.');
    setShowAddProfessor(false); // Esconde o formulário
  };

  // Função para buscar treinos de um aluno
  const fetchTreinosByAlunoId = async (alunoId: number) => {
    try {
      const res = await fetch(`/api/treinos?alunoId=${alunoId}`);
      if (res.ok) {
        const data = await res.json();
        setTreinos(data);
        setTreinoError(null);
      } else {
        setTreinos([]);
        setTreinoError('Nenhum treino encontrado para este aluno.');
      }
    } catch (error) {
      console.error('Erro de rede ao buscar treinos:', error);
      setTreinos([]);
      setTreinoError('Erro ao carregar treinos.');
    }
  };

  // Lidar com a seleção de um aluno para ver seus treinos
  const handleSelectAluno = (aluno: Aluno) => {
    setSelectedAluno(aluno);
    fetchTreinosByAlunoId(aluno.id);
  };

  // Lidar com a alteração do status do professor
  const handleToggleChange = async (professorId: number) => {
    const currentStatus = isCheckedMap[professorId];
    const newStatus = !currentStatus;

    // Atualiza o estado visualmente primeiro para uma resposta rápida
    setIsCheckedMap(prev => ({
      ...prev,
      [professorId]: newStatus
    }));

    try {
      // Aqui você faria a chamada à sua API para atualizar o status no backend
      const res = await fetch(`/api/professores?id=${professorId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!res.ok) {
        // Se a atualização no backend falhar, reverte o estado visual
        setIsCheckedMap(prev => ({
          ...prev,
          [professorId]: currentStatus
        }));
        console.error('Falha ao atualizar status do professor:', res.statusText);
      }
    } catch (error) {
      // Em caso de erro de rede, reverte o estado visual
      setIsCheckedMap(prev => ({
        ...prev,
        [professorId]: currentStatus
      }));
      console.error('Erro de rede ao atualizar status do professor:', error);
    }
  };

  // Lidar com a alteração do status do aluno
  const handleToggleAlunoStatus = async (aluno: Aluno) => {
    const newStatus = !aluno.status;
    const alunoParaAlterar = { ...aluno, status: newStatus };

    try {
      const res = await fetch(`/api/alunos?id=${aluno.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(alunoParaAlterar),
      });

      if (res.ok) {
        // Atualiza o estado local dos alunos
        setAlunos(
          alunos.map((a) =>
            a.id === aluno.id ? { ...a, status: newStatus } : a
          )
        );
      } else {
        console.error('Falha ao atualizar status do aluno:', res.statusText);
      }
    } catch (error) {
      console.error('Erro de rede ao atualizar status do aluno:', error);
    }
  };

  // Filtrar alunos pela barra de pesquisa
  const filteredAlunos = alunos.filter(aluno =>
    aluno.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Lógica de Paginação
  const totalPages = Math.ceil(filteredAlunos.length / itemsPerPage);
  const currentAlunos = filteredAlunos.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  // Funções para lidar com o modal de criação de treino
  const handleAddExercicio = () => {
    setNewExercicios([...newExercicios, { id: 0, name: '', series: 0, repetitions: 0 }]);
  };

  const handleRemoveExercicio = (index: number) => {
    const updatedExercicios = [...newExercicios];
    updatedExercicios.splice(index, 1);
    setNewExercicios(updatedExercicios);
  };

  const handleExercicioChange = (index: number, field: keyof Exercicio, value: string | number) => {
    const updatedExercicios = [...newExercicios];
    // Garante que o ID seja único para cada exercício no formulário (simulação)
    updatedExercicios[index] = { ...updatedExercicios[index], id: Date.now() + index, [field]: value };
    setNewExercicios(updatedExercicios);
  };

  const handleCreateTreino = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newTreinoName || !selectedAluno || !selectedProfessorId || newExercicios.some(ex => !ex.name || ex.series <= 0 || ex.repetitions <= 0)) {
      alert('Por favor, preencha todos os campos do treino e exercícios.');
      return;
    }

    const treinoData = {
      name: newTreinoName,
      exercicios: newExercicios,
      alunoId: selectedAluno.id,
      professorId: selectedProfessorId,
    };

    try {
      const res = await fetch('/api/treinos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(treinoData),
      });

      if (res.ok) {
        alert('Treino criado com sucesso!');
        setShowCreateTreinoModal(false);
        setNewTreinoName('');
        setNewExercicios([{ id: 0, name: '', series: 0, repetitions: 0 }]);
        setSelectedProfessorId(null);
        fetchTreinosByAlunoId(selectedAluno.id); // Atualiza a lista de treinos para o aluno
      } else {
        console.error('Falha ao criar treino:', res.statusText);
        alert('Erro ao criar treino.');
      }
    } catch (error) {
      console.error('Erro de rede ao criar treino:', error);
      alert('Erro de rede ao criar treino.');
    }
  };

  // Função para deletar um treino
  const handleDeleteTreino = async (treinoId: number) => {
    if (!confirm('Tem certeza que deseja excluir este treino?')) return;
    try {
      const res = await fetch(`/api/treinos?id=${treinoId}`, { method: 'DELETE' });
      if (res.ok) {
        alert('Treino excluído com sucesso!');
        if (selectedAluno) {
          fetchTreinosByAlunoId(selectedAluno.id); // Atualiza a lista de treinos
        }
      } else {
        console.error('Falha ao excluir treino:', res.statusText);
        alert('Erro ao excluir treino.');
      }
    } catch (error) {
      console.error('Erro de rede ao excluir treino:', error);
      alert('Erro de rede ao excluir treino.');
    }
  };

  const toggleNotificationDropdown = () => {
    setShowNotifications(!showNotifications);
  };

  return (
    <div className={styles.dashboardContainer}>
      {/* Mensagem de Boas-Vindas */}
      <div className={styles.welcomeMessageContainer}>
        <h1 className={styles.welcomeMessage}>
          Bem-vindo(a) ao seu Painel de <span className={styles.nomeAlunaDestaque}>Administração!</span>
        </h1>
      </div>

      {/* Linha Divisória */}
      <hr className={styles.divider} />

      {/* Header com o botão de Logout e notificações */}
      <header className={styles.dashboardHeader}>
        <h2 className={styles.dashboardTitle}>Painel de Administração</h2>
        <div className={styles.headerIcons}>
          <div className={styles.notificationIcon} onClick={toggleNotificationDropdown}>
            <FaBell className={styles.bellIcon} />
            {aniversariantes.length > 0 && (
              <span className={styles.notificationBadge}>{aniversariantes.length}</span>
            )}
          </div>
        </div>
        <button onClick={() => router.push('/login')} className={styles.logoutButton}>
          Logout
        </button>
      </header>

      {/* Dropdown de Notificações */}
      {showNotifications && (
        <div className={styles.notificationDropdown}>
          <h3>Notificações</h3>
          <ul>
            {aniversariantes.length > 0 ? (
              aniversariantes.map((nome, index) => (
                <li key={index}>🎂 {nome} faz aniversário hoje!</li>
              ))
            ) : (
              <li>Nenhum aniversariante hoje.</li>
            )}
          </ul>
        </div>
      )}

      {/* Botões para adicionar aluno/professor */}
      <div className={styles.actionButtons}>
        <button className={styles.addButton} onClick={() => setShowAddAluno(!showAddAluno)}>
          {showAddAluno ? 'Cancelar' : 'Adicionar Novo Aluno'}
        </button>
        <button className={styles.addButton} onClick={() => setShowAddProfessor(!showAddProfessor)}>
          {showAddProfessor ? 'Cancelar' : 'Adicionar Novo Professor'}
        </button>
      </div>

      {/* Formulário de Adicionar Aluno (condicional) */}
      {showAddAluno && (
        <div className={styles.formContainer}>
          <h3>Adicionar Novo Aluno</h3>
          <form onSubmit={addAluno}>
            <input
              type="text"
              placeholder="Nome do Aluno"
              value={newAluno.name}
              onChange={(e) => setNewAluno({ ...newAluno, name: e.target.value })}
              className={styles.inputField}
            />
            <input
              type="text"
              placeholder="Login do Aluno"
              value={newAluno.login}
              onChange={(e) => setNewAluno({ ...newAluno, login: e.target.value })}
              className={styles.inputField}
            />
            <button type="submit" className={styles.submitButton}>Adicionar</button>
            <button type="button" onClick={() => setShowAddAluno(false)} className={styles.cancelButton}>Cancelar</button>
          </form>
        </div>
      )}

      {/* Formulário de Adicionar Professor (condicional - exemplo, ajustar com sua lógica real) */}
      {showAddProfessor && (
        <div className={styles.formContainer}>
          <h3>Adicionar Novo Professor</h3>
          <form onSubmit={addProfessor}>
            <input type="text" placeholder="Nome do Professor" className={styles.inputField} />
            <input type="text" placeholder="Login do Professor" className={styles.inputField} />
            {/* Adicione campos para status, etc. */}
            <button type="submit" className={styles.submitButton}>Adicionar</button>
            <button type="button" onClick={() => setShowAddProfessor(false)} className={styles.cancelButton}>Cancelar</button>
          </form>
        </div>
      )}

      {/* Seção de Alunos */}
      <div className={styles.projectsInner}>
        <div className={styles.projectsHeader}>
          <h2 className={styles.title}>Alunos</h2>
          <span className={styles.count}>{filteredAlunos.length} Alunos</span>
          <input
            type="text"
            placeholder="Buscar aluno..."
            className={styles.searchInput}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <table className={styles.projectsTable}>
          <thead>
            <tr>
              <th>ID</th>
              <th>Nome</th>
              <th>Login</th>
              <th>Status</th>
              <th>Ações</th>
            </tr>
          </thead>
          <tbody>
            {currentAlunos.map((aluno) => (
              <tr key={aluno.id}>
                <td>{aluno.id}</td>
                <td>{aluno.name}</td>
                <td>{aluno.login}</td>
                <td>
                  <div className={styles.toggle}>
                    <input
                      type="checkbox"
                      id={`toggle-${aluno.id}`}
                      className={styles.toggleCheckbox}
                      checked={aluno.status ?? false} // Assume false se undefined
                      onChange={() => handleToggleAlunoStatus(aluno)}
                    />
                    <label htmlFor={`toggle-${aluno.id}`} className={styles.toggleLabel}>
                      <span className={styles.thumb}></span>
                    </label>
                  </div>
                </td>
                <td className={styles.actionButtons}>
                  <button onClick={() => handleSelectAluno(aluno)}>Ver Treinos</button>
                  <button onClick={() => deleteAluno(aluno.id)} className={styles.deleteButton}>Excluir</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {/* Paginação */}
        <div className={styles.pagination}>
          <button onClick={handlePrevPage} disabled={currentPage === 1} className={styles.paginationButton}>Anterior</button>
          <span className={styles.paginationInfo}>Página {currentPage} de {totalPages}</span>
          <button onClick={handleNextPage} disabled={currentPage === totalPages} className={styles.paginationButton}>Próxima</button>
        </div>
      </div>

      {/* Linha Divisória */}
      <hr className={styles.divider} />

      {/* Seção de Professores */}
      <div className={styles.projectsInner}>
        <div className={styles.projectsHeader}>
          <h2 className={styles.title}>Professores</h2>
          <span className={styles.count}>{professores.length} Professores</span>
        </div>
        <table className={styles.projectsTable}>
          <thead>
            <tr>
              <th>ID</th>
              <th>Nome</th>
              <th>Login</th>
              <th>Status</th>
              <th>Ações</th>
            </tr>
          </thead>
          <tbody>
            {professores.map((professor) => (
              <tr key={professor.id}>
                <td>{professor.id}</td>
                <td>{professor.name}</td>
                <td>{professor.login}</td>
                <td>
                  <div className={styles.toggle}>
                    <input
                      type="checkbox"
                      id={`toggle-prof-${professor.id}`}
                      className={styles.toggleCheckbox}
                      checked={isCheckedMap[professor.id] ?? false}
                      onChange={() => handleToggleChange(professor.id)}
                    />
                    <label htmlFor={`toggle-prof-${professor.id}`} className={styles.toggleLabel}>
                      <span className={styles.thumb}></span>
                    </label>
                  </div>
                </td>
                <td className={styles.actionButtons}>
                  {/* Adicione botões de ação para professores, se necessário */}
                  <button className={styles.deleteButton} /* onClick={() => deleteProfessor(professor.id)} */>Excluir</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Linha Divisória */}
      <hr className={styles.divider} />

      {/* Seção de Treinos do Aluno Selecionado */}
      {selectedAluno && (
        <div className={styles.treinosContainer}>
          <h3>Treinos de {selectedAluno.name}</h3>
          <button className={styles.createTreinoButton} onClick={() => setShowCreateTreinoModal(true)}>Criar Novo Treino</button>
          <ul className={styles.listaTreinos}>
            {selectedAluno.name === "Rayanne Luma Rodrigues da Silva" ? (
              <li className={styles.itemTreino}>
                <p className={styles.afastamentoMessage}>
                  Teve sua matrícula feita em 03 de 2024 depois esteve afastada desde 02 de 2025, onde frequentou apenas 2 dias do mês.
                </p>
              </li>
            ) : (
              treinos.length > 0 ? (
                treinos.map((treino, index) => (
                  <li key={treino.id} className={styles.itemTreino}>
                    <h4><span className={styles.treinoNumero}>{index + 1}.</span> {treino.name}</h4>
                    <p>Professor: {professores.find(p => p.id === treino.professorId)?.name || 'N/A'}</p>
                    <h5>Exercícios:</h5>
                    <ul>
                      {treino.exercicios.map((exercicio, exIndex) => (
                        <li key={exIndex}>
                          {exercicio.name} ({exercicio.series} séries de {exercicio.repetitions} repetições)
                        </li>
                      ))}
                    </ul>
                    <button onClick={() => handleDeleteTreino(treino.id)} className={styles.deleteButton}>Excluir Treino</button>
                  </li>
                ))
              ) : (
                <li className={styles.itemTreino}>
                  <p>{treinoError || 'Nenhum treino encontrado para este aluno.'}</p>
                </li>
              )
            )}
          </ul>
        </div>
      )}

      {/* Modal de Criação de Treino (condicional) */}
      {showCreateTreinoModal && selectedAluno && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <h3>Criar Treino para {selectedAluno.name}</h3>
            <form onSubmit={handleCreateTreino}>
              <label>Nome do Treino:</label>
              <input
                type="text"
                className={styles.inputField}
                value={newTreinoName}
                onChange={(e) => setNewTreinoName(e.target.value)}
                required
              />

              <label>Professor Responsável:</label>
              <select
                className={styles.inputField}
                value={selectedProfessorId || ''}
                onChange={(e) => setSelectedProfessorId(Number(e.target.value))}
                required
              >
                <option value="">Selecione um Professor</option>
                {professores.map(prof => (
                  <option key={prof.id} value={prof.id}>{prof.name}</option>
                ))}
              </select>

              <label>Exercícios:</label>
              <div className={styles.exerciseContainer}>
                {newExercicios.map((exercicio, index) => (
                  <div key={index} className={styles.exerciseItem}>
                    <input
                      type="text"
                      placeholder="Nome do Exercício"
                      value={exercicio.name}
                      onChange={(e) => handleExercicioChange(index, 'name', e.target.value)}
                      required
                    />
                    <input
                      type="number"
                      placeholder="Séries"
                      value={exercicio.series}
                      onChange={(e) => handleExercicioChange(index, 'series', Number(e.target.value))}
                      required
                      min="1"
                    />
                    <input
                      type="number"
                      placeholder="Repetições"
                      value={exercicio.repetitions}
                      onChange={(e) => handleExercicioChange(index, 'repetitions', Number(e.target.value))}
                      required
                      min="1"
                    />
                    <button type="button" onClick={() => handleRemoveExercicio(index)} className={styles.cancelButton}>Remover Exercício</button>
                  </div>
                ))}
                <button type="button" onClick={handleAddExercicio} className={styles.addExerciseButton}>Adicionar Exercício</button>
              </div>

              <div className={styles.modalActions}>
                <button type="submit">Salvar Treino</button>
                <button type="button" onClick={() => setShowCreateTreinoModal(false)}>Cancelar</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Footer do Painel */}
      <footer className={styles.footer}>
        <p>&copy; 2024 Fitness App. Todos os direitos reservados.</p>
      </footer>
    </div>
  );
};

export default Administrador;
